#!/usr/bin/env ruby

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib htk]))

# Put your code here

fvar = 0.0001
vvar = 0.0
directory = "/Users/vbosch/Documents/UPV/Thesis/htk/data/tmp"
training_list_file = "/Users/vbosch/Documents/UPV/Thesis/htk/data/train.lst"
morpheme_list_file = "/Users/vbosch/Documents/UPV/Thesis/htk/data/ListHMMs.htk"
training_sample_file = "/Users/vbosch/Documents/UPV/Thesis/htk/data/train.mlf"
iterations = 4

=begin
hmm = Htk::HTKHMMModel.ranged_linear_hmm("proto",(3..6),2)
prototype = Htk::HTKHMMComposition.new("proto",2)
prototype.add_hmm(hmm)
prototype.write
=end

hmm = Htk::HTKHMMModel.strictly_linear_hmm("proto",4,2)
prototype = Htk::HTKHMMComposition.new("proto",2)
prototype.add_hmm(hmm)

config_file = Htk::ConfigATROS.new
config_file.SOURCEFORMAT="ATROS"
config_file.NUMCEPS=8
config_file.TARGETKIND="MFCC"

initial_estimate_proto = prototype.reestimate_from_training_data(fvar,vvar,training_list_file,directory,config_file)

morpheme_list=Htk::MorphemeList.load(morpheme_list_file)

states = Hash.new(initial_estimate_proto.hmms.first[1].num_states)

macro_comp = Htk::HTKHMMComposition.compose_from_morpheme_list("Macros_hmm",morpheme_list,initial_estimate_proto,states)

gaussians = 2

edit_chain=Htk::EditChain.new("edit_chain","MU #{gaussians} {*.state[2-3].mix}")

edited_macro = macro_comp.edit_hmm(edit_chain,directory,morpheme_list)

trained_model = edited_macro.train(iterations,config_file,directory,morpheme_list,training_list_file,training_sample_file)

trained_model.write
